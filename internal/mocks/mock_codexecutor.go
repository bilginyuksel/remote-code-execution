// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/codigician/remote-code-execution/internal/codexec (interfaces: Codexecutor)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	codexec "github.com/codigician/remote-code-execution/internal/codexec"
	gomock "github.com/golang/mock/gomock"
)

// MockCodexecutor is a mock of Codexecutor interface.
type MockCodexecutor struct {
	ctrl     *gomock.Controller
	recorder *MockCodexecutorMockRecorder
}

// MockCodexecutorMockRecorder is the mock recorder for MockCodexecutor.
type MockCodexecutorMockRecorder struct {
	mock *MockCodexecutor
}

// NewMockCodexecutor creates a new mock instance.
func NewMockCodexecutor(ctrl *gomock.Controller) *MockCodexecutor {
	mock := &MockCodexecutor{ctrl: ctrl}
	mock.recorder = &MockCodexecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCodexecutor) EXPECT() *MockCodexecutorMockRecorder {
	return m.recorder
}

// Exec mocks base method.
func (m *MockCodexecutor) Exec(arg0 context.Context, arg1 string, arg2 codexec.ExecutionInfo) (*codexec.ExecutionRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", arg0, arg1, arg2)
	ret0, _ := ret[0].(*codexec.ExecutionRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockCodexecutorMockRecorder) Exec(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockCodexecutor)(nil).Exec), arg0, arg1, arg2)
}
