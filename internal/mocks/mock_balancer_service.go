// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/codigician/remote-code-execution/internal/handler (interfaces: BalancerService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	codexec "github.com/codigician/remote-code-execution/internal/codexec"
	gomock "github.com/golang/mock/gomock"
)

// MockBalancerService is a mock of BalancerService interface.
type MockBalancerService struct {
	ctrl     *gomock.Controller
	recorder *MockBalancerServiceMockRecorder
}

// MockBalancerServiceMockRecorder is the mock recorder for MockBalancerService.
type MockBalancerServiceMockRecorder struct {
	mock *MockBalancerService
}

// NewMockBalancerService creates a new mock instance.
func NewMockBalancerService(ctrl *gomock.Controller) *MockBalancerService {
	mock := &MockBalancerService{ctrl: ctrl}
	mock.recorder = &MockBalancerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBalancerService) EXPECT() *MockBalancerServiceMockRecorder {
	return m.recorder
}

// Exec mocks base method.
func (m *MockBalancerService) Exec(arg0 context.Context, arg1 codexec.ExecutionInfo) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockBalancerServiceMockRecorder) Exec(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockBalancerService)(nil).Exec), arg0, arg1)
}
