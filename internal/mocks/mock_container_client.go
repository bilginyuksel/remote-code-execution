// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/codigician/remote-code-execution/internal/codexec (interfaces: ContainerClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	container "github.com/docker/docker/api/types/container"
	gomock "github.com/golang/mock/gomock"
)

// MockContainerClient is a mock of ContainerClient interface.
type MockContainerClient struct {
	ctrl     *gomock.Controller
	recorder *MockContainerClientMockRecorder
}

// MockContainerClientMockRecorder is the mock recorder for MockContainerClient.
type MockContainerClientMockRecorder struct {
	mock *MockContainerClient
}

// NewMockContainerClient creates a new mock instance.
func NewMockContainerClient(ctrl *gomock.Controller) *MockContainerClient {
	mock := &MockContainerClient{ctrl: ctrl}
	mock.recorder = &MockContainerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContainerClient) EXPECT() *MockContainerClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockContainerClient) Create(arg0 context.Context, arg1 *container.HostConfig) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockContainerClientMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockContainerClient)(nil).Create), arg0, arg1)
}

// Exec mocks base method.
func (m *MockContainerClient) Exec(arg0 context.Context, arg1 string, arg2 []string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", arg0, arg1, arg2)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockContainerClientMockRecorder) Exec(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockContainerClient)(nil).Exec), arg0, arg1, arg2)
}

// ForceRemove mocks base method.
func (m *MockContainerClient) ForceRemove(arg0 context.Context, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ForceRemove", arg0, arg1)
}

// ForceRemove indicates an expected call of ForceRemove.
func (mr *MockContainerClientMockRecorder) ForceRemove(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceRemove", reflect.TypeOf((*MockContainerClient)(nil).ForceRemove), arg0, arg1)
}
